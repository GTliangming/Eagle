#! /usr/bin/env node

//  node.js 命令行解决方案
const program = require("commander");
// node.js path模块
const path = require("path");
// 使用shell模式匹配文件
const glob = require("glob");
// node.js fs模块
const fs = require("fs");
// 常见的交互式命令行用户接口的集合
const inquirer = require("inquirer");
// The UNIX command rm -rf for node.
const rm = require("rimraf").sync;





const log = require("../utils/log");
const templateConfig = require("../utils/template.json");
const CONST = require("../utils/conf");
const dowload = require("../commands/download");
/* ------------------------------ */
program.usage("<project-name>").parse(process.argv);

// 根据输入，获取项目名称
let projectName = program.args[0];
if (!projectName) {
  // 相当于执行命令的--help选项，显示help信息，这是commander内置的一个命令选项
  program.help();
  return;
}
// 返回 Node.js 进程的当前工作目录
let rootName = path.basename(process.cwd());

main();

/**
 * 主进程main函数
 */
async function main() {
  let projectRoot, templateName;
  try {
    // 1、检测文件路径
    projectRoot = await checkDir();
    // 2、创建项目文件夹
    makeDir(projectRoot);
    // 3、选择模板
    let { git, branch } = await selectTemplate();
    console.log(git, branch);

    // 4、下载模板
    templateName = await dowload(rootName, git, branch);

  } catch (error) {
    log.error(`创建失败：${error.message}`);
    afterError(projectRoot, templateName);
  }
}

/**
 * 检测路径
 */
function checkDir() {
  return new Promise(async (resolve, reject) => {
    const list = glob.sync("*"); // 遍历当前目录
    if (list.length) {
      if (
        list.filter((name) => {
          const fileName = path.resolve(process.cwd(), path.join(".", name));
          const isDir = fs.statSync(fileName).isDirectory();
          return name.indexOf(projectName) !== -1 && isDir;
        }).length !== 0
      ) {
        log.error(`项目${projectName}已经存在`);
        reject(`项目${projectName}已经存在`);
      }
      resolve(projectName);
    } else if (rootName === projectName) {
      let answer = await inquirer.prompt([
        {
          name: "buildInCurrent",
          message:
            "当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目",
          type: "confirm",
          default: true,
        },
      ]);
      resolve(answer.buildInCurrent ? "." : projectName);
    } else {
      resolve(projectName);
    }
  });
}

// 创建路径
function makeDir(projectRoot) {
  if (projectRoot !== ".") {
    fs.mkdirSync(projectName);
  }
}

/**
 * 模板选择
 */
function selectTemplate() {
  return new Promise((resolve, reject) => {
    let choices = Object.values(templateConfig).map((item) => {
      return {
        name: item.name,
        value: item.value,
      };
    });
    let config = {
      // type: 'checkbox',
      type: "list",
      message: "请选择创建项目的模板类型",
      name: "select",
      choices: [new inquirer.Separator("模板类型"), ...choices],
    };
    inquirer.prompt(config).then((data) => {
      let { select } = data;
      let { branch, git } = templateConfig[select];
      resolve({
        git,
        branch,
      });
    });
  });
}

/**
 * 模板渲染后执行
 */
function afterBuild() {
  log.succes("创建成功:)");
}

function afterError(rootName) {
  if (rootName) {
    rm(rootName);
    rm(CONST.TEMPLATE_NAME);
  }
}
