#! /usr/bin/env node

//  node.js 命令行解决方案
const program = require("commander");
// node.js path模块
const path = require("path");
// 使用shell模式匹配文件
const glob = require("glob");
// node.js fs模块
const fs = require("fs");
// 常见的交互式命令行用户接口的集合
const inquirer = require("inquirer");
// The UNIX command rm -rf for node.
const rm = require("rimraf");
const chalk = require('chalk')
const figlet = require('figlet');



const log = require("../utils/log");
const templateConfig = require("../utils/template.json");
const dowload = require("../commands/download");
const runInstall = require("../commands/install")
const runProjects = require('../commands/run')
/* ------------------------------ */
program.usage("<project-name>").parse(process.argv);

// 根据输入，获取项目名称
let projectName = program.args[0];
if (!projectName) {
  // 相当于执行命令的--help选项，显示help信息，这是commander内置的一个命令选项
  program.help();
  return;
}
// 返回 Node.js 进程的当前工作目录
let rootName = path.basename(process.cwd());

main();

/**
 * 主进程main函数
 */
async function main() {
  let projectRoot, templateName;
  try {
    // 1、检测文件路径
    projectRoot = await checkDir();
    // 2、创建项目文件夹
    makeDir(projectRoot);
    // 3、选择模板
    let { git, branch } = await selectTemplate();
    // 4、下载模板
    templateName = await dowload(rootName, git, branch, projectRoot);
    // // 本地配置
    // let customizePrompt = await getCustomizePrompt(templateName, CONST.CUSTOMIZE_PROMPT)
    await isBuild(projectRoot);

  } catch (error) {
    log.error(`创建失败：( !!!!!`);
    afterError(projectRoot, templateName);
  }
}






/**
 * 检测路径
 */
function checkDir() {
  return new Promise(async (resolve, reject) => {
    const list = glob.sync("*"); // 遍历当前目录
    if (list.length) {
      if (
        list.filter((name) => {
          const fileName = path.resolve(process.cwd(), path.join(".", name));
          const isDir = fs.statSync(fileName).isDirectory();
          return name.indexOf(projectName) !== -1 && isDir;
        }).length !== 0
      ) {
        log.info(`项目${projectName}已经存在`);
        reject(`项目${projectName}已经存在`);
      }
      resolve(projectName);
    } else if (rootName === projectName) {
      let answer = await inquirer.prompt([
        {
          name: "buildInCurrent",
          message:
            "当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目",
          type: "confirm",
          default: true,
        },
      ]);
      resolve(answer.buildInCurrent ? "." : projectName);
    } else {
      resolve(projectName);
    }
  });
}

// 创建路径
function makeDir(projectRoot) {
  if (projectRoot !== ".") {
    fs.mkdirSync(projectName);
  }
}

/**
 * 模板选择
 */
function selectTemplate() {
  return new Promise((resolve, reject) => {
    let choices = Object.values(templateConfig).map((item) => {
      return {
        name: item.name,
        value: item.value,
      };
    });
    let config = {
      // type: 'checkbox',
      type: "list",
      message: "请选择创建项目的模板类型",
      name: "select",
      choices: [new inquirer.Separator("模板类型"), ...choices],
    };
    inquirer.prompt(config).then((data) => {
      let { select } = data;
      let { branch, git } = templateConfig[select];
      resolve({
        git,
        branch,
      });
    });
  });
}
/**
 * 删除文件夹
 */

const removePromise = (dir) => {
  return new Promise(function (resolve, reject) {
    //先读文件夹
    fs.stat(dir, function (err, stat) {
      if (stat.isDirectory()) {
        fs.readdir(dir, function (err, files) {
          files = files.map(file => path.join(dir, file));
          files = files.map(file => removePromise(file));
          Promise.all(files).then(function () {
            fs.rmdir(dir, resolve);
          })
        })
      } else {
        fs.unlink(dir, resolve)
      }
    })

  })
}




function afterBuild(projectRoot) {
  log.succes(chalk.green("项目创建成功 :)"))
  console.log("\r\n")
  console.log(chalk.green('cd ' + projectRoot + '\nnpm install\nnpm run start'))
  console.log('\r\n' + figlet.textSync('Bamboos', {
    font: 'Ghost',
    horizontalLayout: 'default',
    verticalLayout: 'default',
    width: 80,
    whitespaceBreak: true
  }));
}
/**
 * 是否自动运行项目
 */
const isBuild = (projectRoot) => {
  return new Promise(async (resolve, reject) => {
    let answer = await inquirer.prompt([
      {
        name: "isRun",
        message:
          "是否在默认浏览器运行当前项目",
        type: "confirm",
        default: false,
      },
    ]);
    if (answer.isRun) {
      runProject(projectRoot)
      resolve()
    } else {
      await afterBuild(projectRoot)
      resolve()
    }
  });
}



const runProject = async (projectRoot) => {
  let answer = await inquirer.prompt([
    {
      name: "type",
      message:
        "请选择安装依赖的方式",
      type: "list",
      default: "npm",
      choices: [
        "npm",
        "yarn"
      ]
    },
  ]);
  const resultPath = process.cwd() + "/" + projectRoot;
  await runInstall(resultPath, () => { }, answer.type)
  await runProjects(resultPath, () => { }, answer.type)
}


function afterError(rootName) {
  if (rootName) {
    rm(rootName);
  }
}
